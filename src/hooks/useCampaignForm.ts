import { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { format, parseISO } from 'date-fns';
import { Campaign, CampaignInfluencer, Persona } from '@/types/campaign';
import { Brand, Product } from '@/types/brand';
import { campaignService } from '@/services/campaign.service';
import { brandService } from '@/services/brand.service';
import { useToast } from '@/hooks/use-toast';

export interface CampaignFormData {
  title: string;
  brandId: string;
  brandName: string;
  productId: string;
  productName: string;
  budget: string;
  proposalDeadline: Date | undefined;
  campaignStartDate: Date | undefined;
  campaignEndDate: Date | undefined;
  adType: 'branding' | 'live-commerce';
  targetContent: {
    influencerCategories: string[];
    targetAge: string;
    uspImportance: number;
    influencerImpact: string;
    additionalDescription: string;
    secondaryContentUsage: boolean;
  };
  selectedInfluencers: string[];
}

export const useCampaignForm = (campaignId?: string) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchParams] = useSearchParams();
  
  const [currentStep, setCurrentStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [dataLoading, setDataLoading] = useState(true);
  const [brandsLoaded, setBrandsLoaded] = useState(false);
  const [productsLoaded, setProductsLoaded] = useState(false);
  const [recommendedInfluencers, setRecommendedInfluencers] = useState<CampaignInfluencer[]>([]);
  const [personas, setPersonas] = useState<Persona[]>([]);
  const [brands, setBrands] = useState<Brand[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [isEditMode, setIsEditMode] = useState(!!campaignId);
  const [isPersonaBased, setIsPersonaBased] = useState(false);
  const [personaData, setPersonaData] = useState<any>(null);
  
  const [formData, setFormData] = useState<CampaignFormData>({
    title: '',
    brandId: '',
    brandName: '',
    productId: '',
    productName: '',
    budget: '',
    proposalDeadline: undefined,
    campaignStartDate: undefined,
    campaignEndDate: undefined,
    adType: 'branding',
    targetContent: {
      influencerCategories: [],
      targetAge: '',
      uspImportance: 5,
      influencerImpact: '',
      additionalDescription: '',
      secondaryContentUsage: false
    },
    selectedInfluencers: []
  });

  // Step 1: Load brand and product data first with improved state management
  useEffect(() => {
    const loadBrandProductData = async () => {
      console.log('üîÑ Î∏åÎûúÎìú/Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë');
      setDataLoading(true);
      setBrandsLoaded(false);
      setProductsLoaded(false);
      
      try {
        console.log('üìä Î∏åÎûúÎìú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ï§ë...');
        const brandsData = await brandService.getBrands();
        console.log('‚úÖ Î∏åÎûúÎìú Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', brandsData.length, 'Í∞ú');
        setBrands(brandsData);
        setBrandsLoaded(true);
        
        console.log('üìä Ï†úÌíà Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ï§ë...');
        const productsData = await brandService.getProducts();
        console.log('‚úÖ Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å:', productsData.length, 'Í∞ú');
        setProducts(productsData);
        setProductsLoaded(true);
        
      } catch (error) {
        console.error('‚ùå Î∏åÎûúÎìú/Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
        toast({
          title: "Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®",
          description: "Î∏åÎûúÎìúÏôÄ Ï†úÌíà Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.",
          variant: "destructive"
        });
      } finally {
        setDataLoading(false);
        console.log('üèÅ Î∏åÎûúÎìú/Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å');
      }
    };

    loadBrandProductData();
  }, [toast]);

  // Step 2: Handle persona-based auto-fill only after data is loaded
  useEffect(() => {
    const checkPersonaBasedData = () => {
      console.log('üé≠ ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ ÏãúÏûë:', {
        brandsLoaded,
        productsLoaded,
        brandsCount: brands.length,
        productsCount: products.length
      });

      if (!brandsLoaded || !productsLoaded || brands.length === 0 || products.length === 0) {
        console.log('‚è≥ Î∏åÎûúÎìú/Ï†úÌíà Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÎåÄÍ∏∞ Ï§ë...');
        return;
      }

      try {
        const isPersonaFromUrl = searchParams.get('persona') === 'true';
        
        if (isPersonaFromUrl) {
          const sessionData = sessionStorage.getItem('personaBasedCampaignData');
          const localData = localStorage.getItem('campaignInfluencerData');
          
          const campaignData = sessionData ? JSON.parse(sessionData) : 
                              localData ? JSON.parse(localData) : null;

          if (campaignData && campaignData.autoFillData) {
            console.log('üé≠ ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ:', campaignData);
            
            // Validate brand and product exist in loaded data
            const brandExists = brands.find(b => b.id === campaignData.autoFillData.brandId);
            const productExists = products.find(p => p.id === campaignData.autoFillData.productId);
            
            console.log('üîç Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨:', {
              brandId: campaignData.autoFillData.brandId,
              brandExists: !!brandExists,
              brandName: brandExists?.name,
              productId: campaignData.autoFillData.productId,
              productExists: !!productExists,
              productName: productExists?.name
            });

            if (!brandExists || !productExists) {
              console.warn('‚ö†Ô∏è ÌéòÎ•¥ÏÜåÎÇò Îç∞Ïù¥ÌÑ∞Ïùò Î∏åÎûúÎìú/Ï†úÌíàÏù¥ ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Ïóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå');
              toast({
                title: "Îç∞Ïù¥ÌÑ∞ Î∂àÏùºÏπò",
                description: "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Î∏åÎûúÎìú/Ï†úÌíà Ï†ïÎ≥¥Í∞Ä ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ÏôÄ ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.",
                variant: "destructive"
              });
              return;
            }
            
            setIsPersonaBased(true);
            setPersonaData(campaignData);
            
            // Auto-fill form data with validated information
            setFormData(prev => ({
              ...prev,
              title: `${campaignData.persona?.name || ''} ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∫†ÌéòÏù∏`,
              brandId: campaignData.autoFillData.brandId,
              brandName: brandExists.name,
              productId: campaignData.autoFillData.productId,
              productName: productExists.name,
              budget: campaignData.autoFillData.budget,
              adType: campaignData.autoFillData.adType,
              targetContent: {
                ...campaignData.autoFillData.targetContent
              },
              selectedInfluencers: campaignData.autoFillData.selectedInfluencers
            }));

            // Set recommended influencers
            if (campaignData.selectedInfluencers) {
              const influencersForCampaign = campaignData.selectedInfluencers.map((inf: any) => ({
                id: inf.id,
                name: inf.name,
                profileImage: inf.avatar || '',
                profileImageUrl: inf.avatar || '',
                followers: inf.followers,
                engagementRate: inf.engagement,
                category: inf.platform || 'Î∑∞Ìã∞',
                platform: inf.platform || 'ÏÉ§Ïò§ÌôçÏäà',
                isSelected: true
              }));
              setRecommendedInfluencers(influencersForCampaign);
            }

            toast({
              title: "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∫†ÌéòÏù∏ ÏÉùÏÑ±",
              description: `${campaignData.persona?.name} ÌéòÎ•¥ÏÜåÎÇòÏùò Ï†ïÎ≥¥Î°ú Ï∫†ÌéòÏù∏ ÏñëÏãùÏù¥ ÏûêÎèô ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§.`,
            });

            // Clean up the session data
            sessionStorage.removeItem('personaBasedCampaignData');
            console.log('‚úÖ ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò ÏûêÎèô ÏûÖÎ†• ÏôÑÎ£å');
          }
        }
      } catch (error) {
        console.error('‚ùå ÌéòÎ•¥ÏÜåÎÇò Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
        toast({
          title: "ÌéòÎ•¥ÏÜåÎÇò Îç∞Ïù¥ÌÑ∞ Ïò§Î•ò",
          description: "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
          variant: "destructive"
        });
      }
    };

    if (!isEditMode) {
      checkPersonaBasedData();
    }
  }, [searchParams, isEditMode, toast, brandsLoaded, productsLoaded, brands, products]);

  useEffect(() => {
    if (campaignId && isEditMode) {
      const loadCampaignData = async () => {
        setIsLoading(true);
        try {
          const campaign = await campaignService.getCampaignById(campaignId);
          if (campaign) {
            console.log('Î°úÎìúÎêú Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞:', campaign);
            setFormData({
              title: campaign.title,
              brandId: campaign.brandId,
              brandName: campaign.brandName,
              productId: campaign.productId,
              productName: campaign.productName,
              budget: campaign.budget.toLocaleString(),
              proposalDeadline: campaign.proposalDeadline ? parseISO(campaign.proposalDeadline) : undefined,
              campaignStartDate: campaign.campaignStartDate ? parseISO(campaign.campaignStartDate) : undefined,
              campaignEndDate: campaign.campaignEndDate ? parseISO(campaign.campaignEndDate) : undefined,
              adType: campaign.adType,
              targetContent: {
                ...campaign.targetContent,
                additionalDescription: campaign.targetContent.additionalDescription || ''
              },
              selectedInfluencers: campaign.influencers.map(inf => inf.id)
            });
            setRecommendedInfluencers(campaign.influencers);
          }
        } catch (error) {
          console.error('Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
          toast({
            title: "Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®",
            description: "Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
            variant: "destructive"
          });
        } finally {
          setIsLoading(false);
        }
      };
      loadCampaignData();
    }
  }, [campaignId, isEditMode, toast]);

  useEffect(() => {
    const loadData = async () => {
      try {
        const [brandsData, productsData] = await Promise.all([
          brandService.getBrands(),
          brandService.getProducts()
        ]);
        setBrands(brandsData);
        setProducts(productsData);
      } catch (error) {
        toast({
          title: "Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®",
          description: "Î∏åÎûúÎìúÏôÄ Ï†úÌíà Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
          variant: "destructive"
        });
      }
    };
    loadData();
  }, [toast]);

  // Step 3: Update filtered products logic with better dependency management
  useEffect(() => {
    console.log('üîÑ ÌïÑÌÑ∞ÎßÅÎêú Ï†úÌíà ÏóÖÎç∞Ïù¥Ìä∏:', {
      brandId: formData.brandId,
      productsLoaded,
      totalProducts: products.length
    });

    if (formData.brandId && productsLoaded) {
      const brandProducts = products.filter(p => p.brandId === formData.brandId);
      console.log('üìä Î∏åÎûúÎìúÎ≥Ñ Ï†úÌíà ÌïÑÌÑ∞ÎßÅ Í≤∞Í≥º:', {
        brandId: formData.brandId,
        filteredCount: brandProducts.length,
        productNames: brandProducts.map(p => p.name)
      });
      setFilteredProducts(brandProducts);
      
      if (formData.productId && !brandProducts.find(p => p.id === formData.productId)) {
        console.log('‚ö†Ô∏è ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ï†úÌíàÏù¥ Î∏åÎûúÎìúÏôÄ ÏùºÏπòÌïòÏßÄ ÏïäÏïÑ Ï¥àÍ∏∞Ìôî');
        setFormData(prev => ({ ...prev, productId: '', productName: '' }));
      }
    } else {
      setFilteredProducts([]);
    }
  }, [formData.brandId, products, productsLoaded, formData.productId]);

  const formatBudget = (value: string) => {
    const numbers = value.replace(/[^\d]/g, '');
    return numbers.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  };

  const handleBudgetChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatBudget(e.target.value);
    setFormData(prev => ({ ...prev, budget: formatted }));
  };

  const handleBrandChange = (brandId: string) => {
    console.log('üè¢ Î∏åÎûúÎìú Î≥ÄÍ≤Ω:', brandId);
    const selectedBrand = brands.find(b => b.id === brandId);
    console.log('üîç ÏÑ†ÌÉùÎêú Î∏åÎûúÎìú:', selectedBrand);
    
    setFormData(prev => ({
      ...prev,
      brandId,
      brandName: selectedBrand?.name || '',
      productId: '',
      productName: ''
    }));
  };

  const handleProductChange = (productId: string) => {
    console.log('üì¶ Ï†úÌíà Î≥ÄÍ≤Ω:', productId);
    const selectedProduct = filteredProducts.find(p => p.id === productId);
    console.log('üîç ÏÑ†ÌÉùÎêú Ï†úÌíà:', selectedProduct);
    
    setFormData(prev => ({
      ...prev,
      productId,
      productName: selectedProduct?.name || ''
    }));
  };

  const handlePersonaRecommendation = async () => {
    setIsLoading(true);
    try {
      const personaData = await campaignService.getPersonaRecommendations(formData.productId);
      setPersonas(personaData);
      
      if (personaData.length > 0) {
        const influencers = await campaignService.getPersonaBasedInfluencers(
          personaData[0].id,
          parseInt(formData.budget.replace(/,/g, ''))
        );
        setRecommendedInfluencers(influencers);
      }
      
      toast({
        title: "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∂îÏ≤ú ÏôÑÎ£å",
        description: `${personaData.length}Í∞úÏùò ÌéòÎ•¥ÏÜåÎÇòÎ•º Í∏∞Î∞òÏúºÎ°ú Ïù∏ÌîåÎ£®Ïñ∏ÏÑúÎ•º Ï∂îÏ≤úÌñàÏäµÎãàÎã§.`
      });
    } catch (error) {
      toast({
        title: "Ï∂îÏ≤ú Ïã§Ìå®",
        description: "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∂îÏ≤úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleAIRecommendation = async () => {
    setIsLoading(true);
    try {
      const influencers = await campaignService.getInfluencerRecommendations(
        parseInt(formData.budget.replace(/,/g, '')),
        formData.targetContent.influencerCategories
      );
      setRecommendedInfluencers(influencers);
      
      setFormData(prev => ({
        ...prev,
        selectedInfluencers: []
      }));
      
      toast({
        title: "AI Ï∂îÏ≤ú ÏôÑÎ£å",
        description: `${influencers.length}Î™ÖÏùò Ïù∏ÌîåÎ£®Ïñ∏ÏÑúÎ•º Ï∂îÏ≤úÌñàÏäµÎãàÎã§.`
      });
    } catch (error) {
      toast({
        title: "Ï∂îÏ≤ú Ïã§Ìå®",
        description: "AI Ï∂îÏ≤úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleInfluencerToggle = (influencerId: string) => {
    setFormData(prev => ({
      ...prev,
      selectedInfluencers: prev.selectedInfluencers.includes(influencerId)
        ? prev.selectedInfluencers.filter(id => id !== influencerId)
        : [...prev.selectedInfluencers, influencerId]
    }));
  };

  const handleSubmit = async () => {
    console.log('=== Ï∫†ÌéòÏù∏ Ï†úÏ∂ú ÏãúÏûë ===');
    console.log('Ï∫†ÌéòÏù∏ ID:', campaignId);
    console.log('Ìé∏Ïßë Î™®Îìú:', isEditMode);
    
    setIsLoading(true);
    try {
      const selectedInfluencerData = recommendedInfluencers.filter(inf => 
        formData.selectedInfluencers.includes(inf.id)
      );

      const campaignData: Omit<Campaign, 'id' | 'createdAt' | 'updatedAt'> = {
        title: formData.title,
        brandId: formData.brandId,
        brandName: formData.brandName,
        productId: formData.productId,
        productName: formData.productName,
        budget: parseInt(formData.budget.replace(/,/g, '')),
        proposalDeadline: formData.proposalDeadline ? format(formData.proposalDeadline, 'yyyy-MM-dd') : '',
        campaignStartDate: formData.campaignStartDate ? format(formData.campaignStartDate, 'yyyy-MM-dd') : '',
        campaignEndDate: formData.campaignEndDate ? format(formData.campaignEndDate, 'yyyy-MM-dd') : '',
        adType: formData.adType === 'live-commerce' ? 'live-commerce' : 'branding',
        status: 'creating',
        currentStage: 1,
        targetContent: formData.targetContent,
        influencers: selectedInfluencerData
      };

      console.log('ÏÉùÏÑ±Ìï† Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞:', campaignData);

      if (isEditMode && campaignId) {
        console.log('Ï∫†ÌéòÏù∏ ÏàòÏ†ï Î™®Îìú - ID:', campaignId);
        await campaignService.updateCampaign(campaignId, campaignData);
        toast({
          title: "Ï∫†ÌéòÏù∏ ÏàòÏ†ï ÏôÑÎ£å",
          description: "Ï∫†ÌéòÏù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§."
        });
        navigate('/brand/campaigns');
      } else {
        console.log('üÜï ÏÉà Ï∫†ÌéòÏù∏ ÏÉùÏÑ± Î™®Îìú');
        const createdCampaign = await campaignService.createCampaign(campaignData);
        console.log('ÏÉùÏÑ±Îêú Ï∫†ÌéòÏù∏:', createdCampaign);
        
        const newCampaignId = createdCampaign.id || createdCampaign;
        console.log('Ï∂îÏ∂úÎêú Ï∫†ÌéòÏù∏ ID:', newCampaignId);
        
        toast({
          title: "Ï∫†ÌéòÏù∏ ÏÉùÏÑ± ÏôÑÎ£å",
          description: isPersonaBased 
            ? "ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò Ï∫†ÌéòÏù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§." 
            : "Ï∫†ÌéòÏù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§. Í≤ÄÌÜ† ÌõÑ Ï†úÏ∂úÌï¥Ï£ºÏÑ∏Ïöî."
        });
        
        navigate(`/brand/campaigns/${newCampaignId}`);
        return;
      }
      
    } catch (error) {
      console.error('=== Ï∫†ÌéòÏù∏ Ï≤òÎ¶¨ Ïã§Ìå® ===', error);
      toast({
        title: "Ï≤òÎ¶¨ Ïã§Ìå®",
        description: isEditMode ? "Ï∫†ÌéòÏù∏ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§." : "Ï∫†ÌéòÏù∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    currentStep,
    setCurrentStep,
    isLoading,
    dataLoading,
    brandsLoaded,
    productsLoaded,
    formData,
    setFormData,
    brands,
    filteredProducts,
    recommendedInfluencers,
    personas,
    isEditMode,
    isPersonaBased,
    personaData,
    handleBudgetChange,
    handleBrandChange,
    handleProductChange,
    handlePersonaRecommendation,
    handleAIRecommendation,
    handleInfluencerToggle,
    handleSubmit
  };
};
